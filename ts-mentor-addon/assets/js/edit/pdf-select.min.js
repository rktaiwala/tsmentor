"use strict";
! function(s) {
	s(window).on("elementor:init", function() {
		var e = elementor.modules.controls.BaseMultiple.extend({
                    loaded:!1,
                    setWorker:function(){
                        window.pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.worker.min.js';
                    },
					addControlSpinner: function() {
						this.ui.select.prop("disabled", !0), this.$el.find(".elementor-control-title").after('<span class="elementor-control-spinner">&nbsp;<i class="eicon-spinner eicon-animation-spin"></i>&nbsp;</span>')
					},
					get_thumbnail:function(id){
						var n=this,
							e = {
                    				nonce: ts_pdf_select.nonce,
                    				action: ts_pdf_select.action,
                    				pdf_id: id
                				};
						s.ajax({
                    		url: ts_pdf_select.ajax_url,
                    		type: "POST",
                    		data: e,
                    		before: n.addControlSpinner(),
                    		success: function(e) {
                        		e.success || console.log("something went wrong!", e.data);
                        		
                    		}
                		})
					},
                    generate_thumbnails:async (source, size=300) => {
                        var that =this;
                        const pdfDocument = pdfjsLib.getDocument(source);
                        return pdfDocument.promise.then(function(pdf) {
                            var pageNumber = 1;
                            return pdf.getPage(pageNumber).then(function(page) {
                                const desiredWidth = size;
                                const viewPort = page.getViewport({ scale: 1 });
                                const scale = desiredWidth / viewPort.width;
                                const scaledViewport = page.getViewport({ scale: scale });
                                const canvas = document.createElement("canvas");
                                canvas.height = scaledViewport.height;
                                canvas.width = scaledViewport.width;
                                var renderTask = page.render({
                                                  canvasContext: canvas.getContext("2d"),
                                                  viewport: scaledViewport,
                                                });
                                return renderTask.promise.then(function () {
                                    return canvas.toDataURL();
                                })
                            })
                        })
                          
                    },
                    makeThumbnail:(page, size) => {
                      // draw page to fit into input size canvas
                      const desiredWidth = size;
                      const viewPort = page.getViewport({ scale: 1 });

                      const scale = desiredWidth / viewPort.width;
                      const scaledViewport = page.getViewport({ scale: scale });

                      const canvas = document.createElement("canvas");
                      canvas.height = scaledViewport.height;
                      canvas.width = scaledViewport.width;

                      return page
                        .render({
                          canvasContext: canvas.getContext("2d"),
                          viewport: scaledViewport,
                        })
                        .promise.then(function () {
                          return canvas.toDataURL();
                        });
                    },
                    
					onReady: function () {
		
						var that = this,
						$el = this.$el,
						wpMediaOptions = { multiple: false },
						inputHidden = $el.find('.tnc-selected-fle-url'),
						inputThumb = $el.find('.tnc-selected-fle-thumbnail');
                        
                        /*if (!that.loaded && typeof(window.pdfjsLib) === 'undefined') {
                            var src = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.min.js';

                            if (!src) {
                                throw Error('PDF.js URL not valid: cannot load PDF.js');
                            }

                            var script = document.createElement('script');
                            script.src = src;
                            document.head.appendChild(script).onload=that.setWorker();
                            that.loaded = true;
                        }*/
                        that.setWorker()
						if (!!this.model.attributes.library_type) {
							wpMediaOptions.library = {
								orderby: "date",
								query: true,
								type:[ this.model.attributes.library_type ]
								
							};
						}
		
						$el.find('.tnc-select-file').click(function (e) {
							var tnc_file_uploader = wp.media(wpMediaOptions)
									.on('select', async function () {
									var attachment = tnc_file_uploader.state().get('selection').first().toJSON();
										
										let thumb=await that.generate_thumbnails(attachment.url);
                                        inputThumb.val(thumb).trigger('input');
                                        inputHidden.val(attachment.url).trigger('input');
										that.render();
								})
								.open();
						});

						$el.find('.tnc-remove-file').click(function (e) {
							e.preventDefault();
							inputThumb.removeAttr('value').trigger('input');
                            inputHidden.removeAttr('value').trigger('input');
							that.render();
						});
					}

			})
		elementor.addControlView("ts-pdf-select", e)
	})
}(jQuery);